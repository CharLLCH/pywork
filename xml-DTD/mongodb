1.create the db, collections (stu_info, cat_info)
2.stu_info is normal, pay attention to that, you can store all the information in stu_info, for Nosql is about doing that, also you can store them in two collections, but the cat_info's s# is DBRef from the stu_info, I think it is like that there are just one this student, everywhere the student is this one, feeling like a pointer.
the code about construct the cat_info:
	stu = {category:x,stu:[new DBRef('stu_info',db.stu_info.findOne({s_id:xxxx})._id)]}
	db.cat_info.save(stu)
	#because the student is only one in the stu_info, so just use the findOne is ok!
3.according to the cat to get the student's score.
	db.cat_info.find({category:x})[0].stu[0].fetch().Score
	#find to find several, use python or other api to loop it. if just one, find()[0] or just findOne() is ok.
4.maybe shell is also can use for.
	for(var var_tmp = db.stu_info.find() ; var_tmp.hasNext() ; ){
		printjson(var_tmp.next().Score);
	}
	so:
	for (var tmp_item = db.cat_info.find({category:xx}) ; tmp_item.hasNext() ; ){
		printjson(tmp_item.next().stu[0].fetch().Score);
	}
	for (var tmp_item = db.cat_info.find({category:xx}) ; tmp_item.hasNext() ; ){
		db.stu_info.find({s_id:tmp_item.next().stu[0].fetch().s_id},{Test_id:true,Score:true})
	#this can just get one field, if just one test is ok, also we can insert all the test:score in the sub document, so inserted-query!?

	ps:java for DBRef fetch..
	mongo = this.dao.getMongo();
	db = this.dao.getDB(mongo);
	DBCollection collection = db.getCollection(this.collection_name);

	BasicDBObject query = new BasicDBObject();
	query.append("field_key",field_key);
	DBCursor cursor = collection.find(query);
	BasicDBObject object = null;

	if (cursor.hasNext()){
		object = (BasicDBObject)cursor.next();
		DBRef ref_obj = (DBRef)object.get("ref_obj");
		BasicDBObject objRefData = (BasicDBObject)ref_obj.fetch();
	}

REAL TRAIN_3 method:
	1.create the db-student-db, and create two collections, one stu_info to save the (S#,test#,score) besides the cat_info to save the (S,category)
	2.according to the feature of mongodb, we choose the dataset like: {s#:xx,test:{test#:score,...}}, meanwhile, to connect two collections, we use DBRef to link the student#, to make it that, all the db, just have one student# of each the student.
	3.get all the test: just output the test:fields.
	4.get one cat student test: use the cat_info to find the _id of the student, the output the test...
	5:format of stu_info: S#,test:{test#:score,...}
		s_id : 14003001 , Test : { C001 : 90 , C002 : 80 , C010 : 93 , C101 : 77 }
		s_id : 14003002 , Test : { C010 : 88 , C100 : 70 , C101 : 90 , C110 : 90 }
		s_id : 14003003 , Test : { C001 : 94 , C003 : 70 , C100 : 94 , C110 : 80 }
		s_id : 14003004 , Test : { C001 : 92 , C010 : 60 , C111 : 90 , C200 : 90 }
		s_id : 14003005 , Test : { C001 : 90 , C002 : 60 , C103 : 80 , C203 : 80 }
		s_id : 14003006 , Test : { C002 : 60 , C003 : 78 , C020 : 94 , C103 : 70 }
		s_id : 14003007 , Test : { C005 : 88 , C011 : 87 , C021 : 98 , C102 : 80 }
		s_id : 14003008 , Test : { C001 : 70 , C002 : 82 , C004 : 80 , C102 : 80 }
		s_id : 14003009 , Test : { C002 : 80 , C010 : 82 , C020 : 90 , C103 : 90 }
		s_id : 14003010 , Test : { C001 : 90 , C002 : 91 , C003 : 92 , C004 : 94 }
		s_id : 14003027 , Test : { #DB# : 90 , ALG# : 80 , #DM# : 80 , NLP# : 80 }


		s# : 14003001 , category : T1 
		s# : 14003002 , category : T1
		s# : 14003003 , category : T2
		s# : 14003004 , category : T2
		s# : 14003005 , category : T3
		s# : 14003006 , category : T3
		s# : 14003007 , category : T5
		s# : 14003008 , category : T7
		s# : 14003009 , category : T8
		s# : 14003010 , category : T8
		s# : 14003027 , category : T9
	6.now get the data we want: 1)get one student's total test-scores 2)get one category's students test scores.
	      1) get one student's all test-scores
	      	 db.stu_info.find({s_id:14003027},{Test:true})
	      2) get one category ..:
	      	 s 
